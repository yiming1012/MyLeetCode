"""
请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。

示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""
class Solution:
    def hammingWeight(self, n: int) -> int:
        """
        执行用时 :52 ms, 在所有 Python3 提交中击败了21.08%的用户
        内存消耗 :13.7 MB, 在所有 Python3 提交中击败了100.00%的用户
        思路：
        1. 对二进制从低位到高位判断，采取移位的方式
        时间复杂度：O(logN)
        空间复杂度: O(1)
        """
        count=0
        while n:
            count+=n&1
            n>>=1
        return count

    def hammingWeight2(self, n: int) -> int:
        """
        执行用时 :44 ms, 在所有 Python3 提交中击败了50.02%的用户
        内存消耗 :13.7 MB, 在所有 Python3 提交中击败了100.00%的用户
        巧妙之处：利用n&(n-1)可以每次消除一个1，这种方式还可以判断一个数是否为2的n次幂
        """
        count=0
        while n:
            count+=1
            n&=n-1
        return count