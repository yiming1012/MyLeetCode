"""
给定一个R行C列的矩阵，表示一个矩形网格滑雪场。

矩阵中第 i 行第 j 列的点表示滑雪场的第 i 行第 j 列区域的高度。

一个人从滑雪场中的某个区域内出发，每次可以向上下左右任意一个方向滑动一个单位距离。

当然，一个人能够滑动到某相邻区域的前提是该区域的高度低于自己目前所在区域的高度。

下面给出一个矩阵作为例子：

 1  2  3  4 5

16 17 18 19 6

15 24 25 20 7

14 23 22 21 8

13 12 11 10 9
在给定矩阵中，一条可行的滑行轨迹为24-17-2-1。

在给定矩阵中，最长的滑行轨迹为25-24-23-…-3-2-1，沿途共经过25个区域。

现在给定你一个二维矩阵表示滑雪场各区域的高度，请你找出在该滑雪场中能够完成的最长滑雪轨迹，并输出其长度(可经过最大区域数)。

输入格式
第一行包含两个整数R和C。

接下来R行，每行包含C个整数，表示完整的二维矩阵。

输出格式
输出一个整数，表示可完成的最长滑雪长度。

数据范围
1≤R,C≤300,
0≤矩阵中整数≤10000
输入样例：
5 5
1 2 3 4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
输出样例：
25
"""
R, C = map(int, input().split())
# print(R,C)
nums = []
for i in range(R):
    nums.append(list(map(int, input().split())))
# print(nums)
dp = [[0] * C for _ in range(R)]
pos = [(0, 1), (0, -1), (1, 0), (-1, 0)]


def dfs(x, y):
    if dp[x][y] != 0:
        return dp[x][y]

    ans = 1
    for i, j in pos:
        a = x + i
        b = y + j
        if 0 <= a < R and 0 <= b < C and nums[x][y] > nums[a][b]:
            ans = max(ans, 1 + dfs(a, b))
            dp[x][y] = ans

    return ans


res = 1
for i in range(R):
    for j in range(C):
        res = max(res, dfs(i, j))
print(res)
